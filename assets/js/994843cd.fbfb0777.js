"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[979],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>v});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},h=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),h=r,v=p["".concat(l,".").concat(h)]||p[h]||d[h]||i;return n?o.createElement(v,a(a({ref:t},u),{},{components:n})):o.createElement(v,a({ref:t},u))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7366:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const i={sidebar_position:8},a="8: Hands-On - Add the event listener",s={unversionedId:"add-event-listener",id:"add-event-listener",title:"8: Hands-On - Add the event listener",description:"We added the logic for publishing our domain event. Now we need to add a first consumer.",source:"@site/docs/8.add-event-listener.md",sourceDirName:".",slug:"/add-event-listener",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/add-event-listener",draft:!1,editUrl:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events-docs/docs/8.add-event-listener.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"7: Theory - Event Handlers in Spring",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/theory-event-listener"}},l={},c=[{value:"The event listener in the process adapter",id:"the-event-listener-in-the-process-adapter",level:2},{value:"Task 1: Consume the RequestPublishingEvent",id:"task-1-consume-the-requestpublishingevent",level:3},{value:"The delegate implementation",id:"the-delegate-implementation",level:2},{value:"Validate",id:"validate",level:3},{value:"TDD",id:"tdd",level:3},{value:"Solution",id:"solution",level:3}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"8-hands-on---add-the-event-listener"},"8: Hands-On - Add the event listener"),(0,r.kt)("p",null,"We added the logic for publishing our domain event. Now we need to add a first consumer.\nFor now, we will work with Spring's default behaviour. In the next section we will update the code to publish our\ndomain events to a Kafka queue topic as well."),(0,r.kt)("h2",{id:"the-event-listener-in-the-process-adapter"},"The event listener in the process adapter"),(0,r.kt)("p",null,"Here is an example of an ",(0,r.kt)("inlineCode",{parentName:"p"},"EventProcessor")," that listens to an ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleEvent"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Slf4j\n@Component\npublic class EventProcessor {\n\n    // ...\n\n    @TransactionalEventListener(phase = AFTER_COMMIT)\n    public void handleEvent(ExampleEvent event) {\n        // do something\n    }\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Hint:")," TransactionalEventListener is a Spring feature that allows you to listen to events that are published within a\ntransaction. This is useful for publishing events that are triggered by a command. The event is only published if\nthe transaction is committed successfully. If the transaction is rolled back, the event is not published.")),(0,r.kt)("h3",{id:"task-1-consume-the-requestpublishingevent"},"Task 1: Consume the RequestPublishingEvent"),(0,r.kt)("p",null,"We defined a domain event in the previous hands-on section, namely the ",(0,r.kt)("inlineCode",{parentName:"p"},"Book.RequestPublishingEvent.class"),".\nNow create your own ",(0,r.kt)("inlineCode",{parentName:"p"},"EventProcessor")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"process")," package and make it listen to our ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestPublishingEvent"),"."),(0,r.kt)("p",null,"For now, maybe add a log statement s.t. you can verify the event is consumed correctly."),(0,r.kt)("h2",{id:"the-delegate-implementation"},"The delegate implementation"),(0,r.kt)("p",null,"We will continue by implementing the service class ",(0,r.kt)("inlineCode",{parentName:"p"},"/process/book/PublishBookDelegate.java"),", that contains the business\nlogic that needs to be executed when a ",(0,r.kt)("inlineCode",{parentName:"p"},"Book.RequestPublishingEvent.class")," is fired."),(0,r.kt)("p",null,"Useful snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class PublishBookDelegate {\n\n  private final BookService bookService;\n  private final PublisherService publisherService;\n\n\n  public PublishBookDelegate(BookService bookService, PublisherService publisherService) {\n    this.bookService = bookService;\n    this.publisherService = publisherService;\n  }\n\n  @Transactional(propagation = REQUIRES_NEW)\n  public void publishBook(Book.RequestPublishingEvent event) {\n    // retrieve book by id from event\n    \n   // request the publishing of the book via the Publisher ACL layer (also see API docs below)\n\n    // update the isbn of the book you received as a response and then store the book\n  }\n}\n")),(0,r.kt)("p",null,"The API on the publisher service is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'POST /publishers/receiveBookOffer\nHost: localhost:8081\nContent-Type: application/json\n\n{\n  "publisherId": "<SOME-UUID>",\n  "author": "author name",\n  "title": "Cool Title"\n}\n\nReturns:\n{\n  "isbn": "ISBN-3895b77d-ee27-40de-9b08-bf24fe2a013a"\n}\n')),(0,r.kt)("h3",{id:"validate"},"Validate"),(0,r.kt)("p",null,"Let's test your implementation. Here are the test classes for the EventProcessor and the PublishBookDelegate."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@SpringJUnitConfig\n@SpringBootTest\nclass EventProcessorTest {\n\n    @Mock\n    private PublishBookDelegate publishBookDelegate;\n\n    @InjectMocks\n    private EventProcessor eventProcessor;\n\n    @Test\n    void shouldCallTheDelegateToActOnEvent() {\n        // when\n        Book.RequestPublishingEvent requestPublishingEvent = new Book.RequestPublishingEvent(1L, UUID.randomUUID());\n        eventProcessor.handleEvent(requestPublishingEvent);\n        // then\n        verify(publishBookDelegate, times(1)).publishBook(requestPublishingEvent);\n    }\n}\n")),(0,r.kt)("p",null,"and"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'import jakarta.persistence.EntityManager;\nimport jakarta.transaction.Transactional;\nimport org.junit.jupiter.api.Test;\nimport org.mockserver.client.MockServerClient;\nimport org.mockserver.model.Header;\nimport org.mockserver.springtest.MockServerTest;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.boot.test.context.SpringBootTest;\nimport uk.devoxx.tackle_eventual_consistency.domain.book.Book;\nimport uk.devoxx.tackle_eventual_consistency.domaininteraction.book.BookDTO;\nimport uk.devoxx.tackle_eventual_consistency.domaininteraction.book.BookDataService;\nimport uk.devoxx.tackle_eventual_consistency.domaininteraction.book.BookFlow;\n\nimport javax.json.Json;\nimport java.util.UUID;\nimport java.util.concurrent.TimeUnit;\n\nimport static org.assertj.core.api.Assertions.assertThat;\nimport static org.mockserver.matchers.Times.exactly;\nimport static org.mockserver.model.HttpRequest.request;\nimport static org.mockserver.model.HttpResponse.response;\n\n@MockServerTest\n@SpringBootTest\nclass PublishBookDelegateTest {\n\n    private static final Long BOOK_ID = 1L;\n    private static final Long AUTHOR_ID = 2L;\n\n    @Autowired\n    private BookFlow bookFlow;\n\n    @Autowired\n    private BookDataService bookDataService;\n\n    private MockServerClient mockServerClient;\n\n    @Autowired\n    private EntityManager entityManager;\n\n    @Test\n    @Transactional\n    void shouldCallThePublisherServiceAPIWithCorrectPayload() {\n        PublishBookDelegate publishBookDelegate = new PublishBookDelegate(bookFlow);\n        UUID publisherUUID = UUID.randomUUID();\n        UUID isbnUUID = UUID.randomUUID();\n        configureMockPublishersReceiveBookOffer(isbnUUID.toString());\n\n        entityManager.createNativeQuery(\n                        "INSERT INTO author (id, first_name, last_name) VALUES (?,?,?)")\n                .setParameter(1, AUTHOR_ID)\n                .setParameter(2, "firstName")\n                .setParameter(3, "lastName")\n                .executeUpdate();\n\n        entityManager.createNativeQuery(\n                        "INSERT INTO book (id, title, author_id, genre, published, publisher_id, isbn) " +\n                                "VALUES (?,?,?,?,?,?,?)")\n                .setParameter(1, BOOK_ID)\n                .setParameter(2, "title")\n                .setParameter(3, AUTHOR_ID)\n                .setParameter(4, "HORROR")\n                .setParameter(5, false)\n                .setParameter(6, null)\n                .setParameter(7, null)\n                .executeUpdate();\n\n        entityManager.flush();\n        BookDTO checkBook = bookDataService.findById(BOOK_ID);\n        assertThat(checkBook.published()).isFalse();\n        assertThat(checkBook.isbn()).isNull();\n        // when\n        publishBookDelegate.publishBook(new Book.RequestPublishingEvent(BOOK_ID, publisherUUID));\n        // then\n        mockServerClient.verify(request()\n                .withPath("/publishers/receiveBookOffer")\n                .withMethod("POST")\n                .withBody(Json.createObjectBuilder()\n                        .add("publisherId", publisherUUID.toString())\n                        .add("author", "firstName lastName")\n                        .add("title", "title")\n                        .build().toString()));\n        BookDTO resultBook = bookDataService.findById(BOOK_ID);\n        assertThat(resultBook.published()).isTrue();\n        assertThat(resultBook.isbn()).isEqualTo(String.format("ISBN-%s", isbnUUID));\n\n    }\n\n    private void configureMockPublishersReceiveBookOffer(String uuid) {\n        var responseBody = Json.createObjectBuilder()\n                .add("isbn", String.format("ISBN-%s", uuid))\n                .build().toString();\n\n        mockServerClient.when(request().withMethod("POST").withPath("/publishers/receiveBookOffer"), exactly(1)).respond(\n                response()\n                        .withStatusCode(202)\n                        .withHeaders(new Header("Content-Type", "application/json; charset=utf-8"))\n                        .withBody(responseBody)\n                        .withDelay(TimeUnit.SECONDS,1)\n        );\n    }\n}\n')),(0,r.kt)("h3",{id:"tdd"},"TDD"),(0,r.kt)("p",null,"You can tackle this task following a prepared test-driven development approach! You can find the code prepared\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events/tree/task_8/add_event_listener_TDD"},"in this branch"),"."),(0,r.kt)("h3",{id:"solution"},"Solution"),(0,r.kt)("p",null,"Got stuck anywhere along the way? Not to worry, you can find the fully implemented solution\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events/tree/task_8/add_event_listener_DONE"},"in this branch"),"."))}d.isMDXComponent=!0}}]);