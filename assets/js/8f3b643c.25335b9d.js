"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[450],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:6},i="6: Hands-On - Add domain event support",s={unversionedId:"add-domain-event-support",id:"add-domain-event-support",title:"6: Hands-On - Add domain event support",description:"Status Quo",source:"@site/docs/6.add-domain-event-support.md",sourceDirName:".",slug:"/add-domain-event-support",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/add-domain-event-support",draft:!1,editUrl:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events-docs/docs/6.add-domain-event-support.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"5: Hands-On - Set up the Application",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/setting-up-an-initial-application"},next:{title:"7: Theory - Event Handlers in Spring",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/theory-event-listener"}},l={},p=[{value:"Status Quo",id:"status-quo",level:2},{value:"The command",id:"the-command",level:3},{value:"Task: Implement the domain event support",id:"task-implement-the-domain-event-support",level:2}],c={toc:p},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"6-hands-on---add-domain-event-support"},"6: Hands-On - Add domain event support"),(0,o.kt)("h2",{id:"status-quo"},"Status Quo"),(0,o.kt)("p",null,"We got to know the domain in section 4. In our application we are able to register authors, write books and publish them."),(0,o.kt)("h3",{id:"the-command"},"The command"),(0,o.kt)("p",null,"For that purpose I prepared the ",(0,o.kt)("inlineCode",{parentName:"p"},"/commands/book/BookCommands.java")," class containing our new command API endpoint:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'POST /books/{id}/commands/publish HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "publisherId": "80553ae1-2ef8-4adf-8fa8-d551684a9ea3"\n}\n')),(0,o.kt)("p",null,"Currently, this endpoint checks, whether a book can be published and if so sets it into a publishing state and persists it to the DB.\nOur task now is to trigger a domain event that represents this publishing action. This published domain event can then be processed\nasynchronously to trigger other actions connected to the publishing request, such as the confirmation of a domain external publisher."),(0,o.kt)("h2",{id:"task-implement-the-domain-event-support"},"Task: Implement the domain event support"),(0,o.kt)("p",null,"We want to allow a publishing request and, since we aim for eventual consistency, the publishing of a related domain\nevent, that can be consumed later on by our process adapter.\nTo be able to handle domain events in Spring, we need to add a new dependency in our ",(0,o.kt)("inlineCode",{parentName:"p"},"pom.xml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"<dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-commons</artifactId>\n</dependency>\n")),(0,o.kt)("p",null,"The challenge of this task is on the one hand to actually register domain events on the domain entity, but then also map them to\nthe actual JPA entity which will eventually be persisted by the Repository. That in turn will trigger the handling of\ndomain events in the ",(0,o.kt)("inlineCode",{parentName:"p"},"AbstractAggregateRoot.java"),". If we sent domain events from the domain layer already, we\ncould encounter a chicken and egg problem, since the domain event would be sent before the JPA entity is persisted and a possible\nroll back would leave us in an inconsistent state."),(0,o.kt)("p",null,"Here are some useful snippets. Can you implement them in the correct places?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"    @Getter\n    private final List<DomainEvent> domainEvents = new ArrayList<>();\n")),(0,o.kt)("p",null,"Our abstract base Domain event"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"    public abstract class DomainEvent {}\n")),(0,o.kt)("p",null,"and the actual publishing event we want to trigger when publishing was requested."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"    @Value\n    public static class RequestPublishingEvent extends DomainEvent {\n        Long bookId;\n        UUID publisherId;\n    }\n")),(0,o.kt)("p",null,"The following snippet provides us the support for handling the Domain events correctly in our JPA entity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class BookJPA extends AbstractAggregateRoot<BookJPA> {\n    // ...\n    public void registerDomainEvents(List<DomainEvent> domainEvents) {\n      domainEvents.forEach(this::andEvent);\n    }\n}\n")),(0,o.kt)("p",null,"In order to test the complete flow you will need to trigger the publishing of a book and then check whether the\ndomain event was published correctly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'### Register an author first\nPOST /authors/commands/register HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "firstName": "PLACE_YOUR_FIRST_NAME",\n  "lastName": "PLACE_YOUR_LAST_NAME"\n}\n\n\n### Then write a book\n### TODO chnage the author id to something that exists in your DB\nPOST /authors/10001/commands/writeBook HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "title": "PLACE_YOUR_TILE",\n  "genre": "HORROR"\n}\n\n\n### ThenPublish a book\n### TODO change the book id to something that exists in your DB and the publisherID to one that exists on your local\n### instance of the publishing service\nPOST /books/10008/commands/publish HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "publisherId": "80553ae1-2ef8-4adf-8fa8-d551684a9ea3"\n}\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},"### TDD\nYou can tackle this task following a prepared test-driven development approach! You can find the code prepared \n[in this branch](https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events/tree/task_5/add_domain_event_support_TDD).\n\n### Solution\nGot stuck anywhere along the way? Not to worry, you can find the fully implemented solution \n[in this branch](https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events/tree/task_5/add_domain_event_support_DONE).\n")))}u.isMDXComponent=!0}}]);