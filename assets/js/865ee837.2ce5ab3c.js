"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[623],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),c=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(t),v=r,m=u["".concat(l,".").concat(v)]||u[v]||d[v]||i;return t?a.createElement(m,o(o({ref:n},p),{},{components:t})):a.createElement(m,o({ref:n},p))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=v;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},2010:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=t(7462),r=(t(7294),t(3905));const i={sidebar_position:7},o="7: Theory - Event Handlers in Spring",s={unversionedId:"theory-event-listener",id:"theory-event-listener",title:"7: Theory - Event Handlers in Spring",description:"In the Spring Framework, there are several ways to create event listeners for domain events. The most common ways are as",source:"@site/docs/7.theory-event-listener.md",sourceDirName:".",slug:"/theory-event-listener",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/theory-event-listener",draft:!1,editUrl:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events-docs/docs/7.theory-event-listener.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"6: Hands-On - Add domain event support",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/add-domain-event-support"},next:{title:"8: Hands-On - Add the event listener",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/add-event-listener"}},l={},c=[{value:"Annotation-based Event Listeners",id:"annotation-based-event-listeners",level:2},{value:"Basic @EventListener",id:"basic-eventlistener",level:3},{value:"Using @TransactionalEventListener",id:"using-transactionaleventlistener",level:3},{value:"Asynchronous Event Listeners",id:"asynchronous-event-listeners",level:3},{value:"Implementing ApplicationListener Interface",id:"implementing-applicationlistener-interface",level:2}],p={toc:c},u="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(u,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"7-theory---event-handlers-in-spring"},"7: Theory - Event Handlers in Spring"),(0,r.kt)("p",null,"In the Spring Framework, there are several ways to create event listeners for domain events. The most common ways are as\nfollows:"),(0,r.kt)("h2",{id:"annotation-based-event-listeners"},"Annotation-based Event Listeners"),(0,r.kt)("h3",{id:"basic-eventlistener"},"Basic @EventListener"),(0,r.kt)("p",null,"These event listeners use the @EventListener annotation on a method to indicate that the method should handle a specific\nevent type. The annotated method will be automatically detected by Spring, and the appropriate event will be passed as a\nparameter to the method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class ExampleEventListener {\n\n    @EventListener\n    public void onExampleEvent(ExampleEvent event) {\n        // Handle the ExampleEvent\n    }\n\n}\n")),(0,r.kt)("h3",{id:"using-transactionaleventlistener"},"Using @TransactionalEventListener"),(0,r.kt)("p",null,"The @TransactionalEventListener annotation is similar to ",(0,r.kt)("inlineCode",{parentName:"p"},"@EventListener"),", but it allows you to bind the event listener's\nexecution to a specific phase of the transaction lifecycle. This can be useful when you want to ensure that an event is\nonly handled after a transaction has been successfully committed or rolled back."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class ExampleEventListener {\n\n    @TransactionalEventListener(phase = TransactionPhase.AFTER_COMMIT)\n    public void onOrderCreated(ExampleEvent event) {\n        // Handle the ExampleEvent after the transaction has been committed\n    }\n\n}\n")),(0,r.kt)("h3",{id:"asynchronous-event-listeners"},"Asynchronous Event Listeners"),(0,r.kt)("p",null,"By default, event listeners in Spring are synchronous, meaning that they run on the same thread as the publisher.\nHowever, you can configure event listeners to run asynchronously by using the ",(0,r.kt)("inlineCode",{parentName:"p"},"@Async")," annotation in conjunction with\n",(0,r.kt)("inlineCode",{parentName:"p"},"@EventListener")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"@TransactionalEventListener"),". This will cause the listener to run in a separate thread, allowing the\npublisher to continue processing without waiting for the listener to finish."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class ExampleEventListener {\n\n    @Async\n    @EventListener\n    public void onOrderCreated(ExampleEvent event) {\n        // Handle the ExampleEvent asynchronously\n    }\n\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Remember that if you want to use the @Async annotation, you also need to enable asynchronous processing in your Spring\nconfiguration using the @EnableAsync annotation.")),(0,r.kt)("h2",{id:"implementing-applicationlistener-interface"},"Implementing ApplicationListener Interface"),(0,r.kt)("p",null,"You can create an event listener by implementing the ",(0,r.kt)("inlineCode",{parentName:"p"},"ApplicationListener")," interface and specifying the event type as a\ngeneric parameter. You need to override the ",(0,r.kt)("inlineCode",{parentName:"p"},"onApplicationEvent()")," method to handle the event."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class ExampleEventListener implements ApplicationListener<ExampleEvent> {\n\n    @Override\n    public void onApplicationEvent(ExampleEvent event) {\n        // Handle the ExampleEvent\n    }\n\n}\n")),(0,r.kt)("p",null,"These are the most common ways to create event listeners for Spring domain events. Each approach has its advantages and\nuse cases, so in general, choose the one that best suits your application's requirements."))}d.isMDXComponent=!0}}]);