"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[385],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(s,".").concat(h)]||u[h]||d[h]||r;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7182:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_position:5},i="5: Hands-On - Set up the App",l={unversionedId:"setting-up-an-initial-application",id:"setting-up-an-initial-application",title:"5: Hands-On - Set up the App",description:"Setting up the project from scratch would take up too much time and focus away from the important content of this",source:"@site/docs/5.setting-up-an-initial-application.md",sourceDirName:".",slug:"/setting-up-an-initial-application",permalink:"/tackle-eventual-consistency-witch-domain-events/docs/setting-up-an-initial-application",draft:!1,editUrl:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events-docs/docs/5.setting-up-an-initial-application.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"4: Hands-On - The domain",permalink:"/tackle-eventual-consistency-witch-domain-events/docs/getting-to-know-the-domain"},next:{title:"6: Hands-On: Fire a Domain Event",permalink:"/tackle-eventual-consistency-witch-domain-events/docs/process-adapter"}},s={},p=[{value:"OPTIONAL: DO IT YOURSELF",id:"optional-do-it-yourself",level:3},{value:"OPTIONAL: Your config should be something like this:",id:"optional-your-config-should-be-something-like-this",level:3},{value:"OPTIONAL: Create the clean hexagonal onion folder structure",id:"optional-create-the-clean-hexagonal-onion-folder-structure",level:3},{value:"OPTIONAL: Database",id:"optional-database",level:3},{value:"Validate",id:"validate",level:2}],c={toc:p},u="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(u,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"5-hands-on---set-up-the-app"},"5: Hands-On - Set up the App"),(0,o.kt)("p",null,"Setting up the project from scratch would take up too much time and focus away from the important content of this\nmini lab. Hence, I took the liberty of preparing a repository that you can fork or clone."),(0,o.kt)("p",null,"Button to GitHub is located in the header menu. Alternatively, click\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/MaikKingma/javaland-clean-hexagonal-onion"},"here"),"."),(0,o.kt)("p",null,"You can either check out the prepared setup branch or, optionally set the project up yourself."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"git checkout setup-done")),(0,o.kt)("p",null,"If you checked out this branch then you can proceed to the validation step and skip the following ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"OPTIONAL"))," steps.\n(there are still some mandatory steps after the optional ones). If you chose to set up the project yourself,\nplease follow the ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"OPTIONAL"))," steps."),(0,o.kt)("h3",{id:"optional-do-it-yourself"},"OPTIONAL: DO IT YOURSELF"),(0,o.kt)("p",null,"If you feel like you want to do it all yourself you can use Spring Initializr to setup our spring boot project."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Go to the ",(0,o.kt)("a",{parentName:"li",href:"https://bit.ly/javaland-spring-init"},"Spring Initializr")),(0,o.kt)("li",{parentName:"ul"},"Choose your Project Dependency Manager of your choice (Maven or Gradle)."),(0,o.kt)("li",{parentName:"ul"},"Choose your Language of choice."),(0,o.kt)("li",{parentName:"ul"},"For the Spring Boot version at least 2.7.0."),(0,o.kt)("li",{parentName:"ul"},"Fill in the Project Metadata as you see fit, but make sure packaging is Jar and the Java version is 17."),(0,o.kt)("li",{parentName:"ul"},"On the right-hand side you can see the add dependencies button. You need to add the following:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Spring Web"),(0,o.kt)("li",{parentName:"ul"},"Spring Data JPA"),(0,o.kt)("li",{parentName:"ul"},"PostgreSQL Driver"),(0,o.kt)("li",{parentName:"ul"},"Liquibase Migration"),(0,o.kt)("li",{parentName:"ul"},"Lombok"),(0,o.kt)("li",{parentName:"ul"},"Spring Boot DevTools (optional)")))),(0,o.kt)("h3",{id:"optional-your-config-should-be-something-like-this"},"OPTIONAL: Your config should be something like this:"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"spring-initializr.png",src:n(1283).Z,width:"3036",height:"1558"})),(0,o.kt)("h3",{id:"optional-create-the-clean-hexagonal-onion-folder-structure"},"OPTIONAL: Create the clean hexagonal onion folder structure"),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"package-structure.png",src:n(7774).Z,width:"886",height:"604"})),(0,o.kt)("h3",{id:"optional-database"},"OPTIONAL: Database"),(0,o.kt)("p",null,"add these lines to ",(0,o.kt)("inlineCode",{parentName:"p"},"src/main/resources/application.properties")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties"},"# DataSource\nspring.datasource.url=jdbc:postgresql://localhost:5432/clean-hexagonal-onion-service\nspring.datasource.username=postgres\nspring.datasource.password=postgres\n")),(0,o.kt)("p",null,"and create a ",(0,o.kt)("inlineCode",{parentName:"p"},"./docker-compose.yml")," file and paste this content into it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"version: '3.9'\n\nservices:\n  postgres:\n    image: postgres\n    restart: always\n    environment:\n      POSTGRES_USER: postgres\n      POSTGRES_PASSWORD: postgres\n      POSTGRES_DB: clean-hexagonal-onion-service\n    ports:\n      - '5432:5432'\n    healthcheck:\n      test: [\"CMD-SHELL\", \"pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}\"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n")),(0,o.kt)("h2",{id:"validate"},"Validate"),(0,o.kt)("p",null,"Run the docker-compose script from the IDE or from the terminal with ",(0,o.kt)("inlineCode",{parentName:"p"},"docker compose up --build"),".\nLast but not least, in order to avoid errors for now, please comment out the liquibase dependency in your ",(0,o.kt)("inlineCode",{parentName:"p"},"./pom.xml"),"."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},(0,o.kt)("strong",{parentName:"p"},"Note:")," You may have to enable annotation processing in your IDE for the Lombok dependency.")),(0,o.kt)("p",null,"Validate that the Spring application starts by running the application (without any errors).\nsimilar to this:\n",(0,o.kt)("img",{alt:"package-structure.png",src:n(9863).Z,width:"1604",height:"824"})),(0,o.kt)("p",null,"All green? Well done! We are now ready to move on to the next chapter."))}d.isMDXComponent=!0},7774:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/package-structure-56a2c06a4d9d6b9a6b5f920e21a66dd8.png"},9863:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/spring-first-run-8562bc6f397c86bb53406b5300189d0c.png"},1283:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/spring-initializr-53a0cdf33ecb8d055ee01719cf683d40.png"}}]);