"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[450],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=o,m=c["".concat(l,".").concat(h)]||c[h]||u[h]||i;return n?a.createElement(m,r(r({ref:t},d),{},{components:n})):a.createElement(m,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[c]="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},6259:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:6},r="6: Hands-On - Add domain event support",s={unversionedId:"add-domain-event-support",id:"add-domain-event-support",title:"6: Hands-On - Add domain event support",description:"Status Quo",source:"@site/docs/6.add-domain-event-support.md",sourceDirName:".",slug:"/add-domain-event-support",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/add-domain-event-support",draft:!1,editUrl:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events-docs/docs/6.add-domain-event-support.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"5: Hands-On - Set up the Application",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/setting-up-an-initial-application"},next:{title:"7: Theory - Event Handlers in Spring",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/theory-event-listener"}},l={},p=[{value:"Status Quo",id:"status-quo",level:2},{value:"The command",id:"the-command",level:3},{value:"Task: Implement the domain event support",id:"task-implement-the-domain-event-support",level:2},{value:"The AbstractAggregateRoot.class",id:"the-abstractaggregaterootclass",level:3},{value:"TDD",id:"tdd",level:3},{value:"Solution",id:"solution",level:3}],d={toc:p},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"6-hands-on---add-domain-event-support"},"6: Hands-On - Add domain event support"),(0,o.kt)("h2",{id:"status-quo"},"Status Quo"),(0,o.kt)("p",null,"We got to know the domain in section 4. In our application we want to be able to register authors, write books and\npublish them."),(0,o.kt)("h3",{id:"the-command"},"The command"),(0,o.kt)("p",null,"For that purpose I prepared the ",(0,o.kt)("inlineCode",{parentName:"p"},"/commands/book/BookCommands.java")," class containing our new command API endpoint:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'POST /books/{id}/commands/publish HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "publisherId": "80553ae1-2ef8-4adf-8fa8-d551684a9ea3"\n}\n')),(0,o.kt)("p",null,"Currently, this endpoint checks, whether a book can be published and if so sets it into a publishing state and persists\nit to the DB.\nOur task now is to trigger a domain event that represents this publishing action. This published domain event can then\nbe processed\nasynchronously to trigger other actions connected to the publishing request, such as the confirmation of a domain\nexternal publisher."),(0,o.kt)("h2",{id:"task-implement-the-domain-event-support"},"Task: Implement the domain event support"),(0,o.kt)("p",null,"We want to allow a publishing request and, since we aim for eventual consistency in our business process, the publishing\nof a related domain\nevent, that can be consumed later on by our process adapter (event listener).\nTo be able to handle domain events in Spring, we need to add a new dependency in our ",(0,o.kt)("inlineCode",{parentName:"p"},"pom.xml"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-xml"},"\n<dependency>\n    <groupId>org.springframework.data</groupId>\n    <artifactId>spring-data-commons</artifactId>\n</dependency>\n")),(0,o.kt)("h3",{id:"the-abstractaggregaterootclass"},"The AbstractAggregateRoot.class"),(0,o.kt)("p",null,"This class is meant to be extended by your aggregate root entities. By doing so, your aggregates gain the ability to\ncapture domain events and have them automatically published when saved or deleted via Spring Data repositories, thus\nadhering to DDD principles and enhancing the expressiveness of your model with respect to domain events."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Purpose:")," In DDD, domain events are significant occurrences within the domain. These events capture outcomes or changes\nin the state of the domain that are important for the business. AbstractAggregateRoot facilitates the handling of these\nevents by allowing aggregates to capture and later publish them when interacting with Spring Data repositories."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"How it Works:")," The class maintains a private list (domainEvents) to store the events. Events are added to this list\nthrough the registerEvent(T event) method, which is intended to be called within the aggregate when a state change\noccurs that should be communicated as a domain event."),(0,o.kt)("p",null,"The challenge of this task is on the one hand to actually register domain events on the domain entity / aggregate, and\nthen also map them to the JPA entity which will be persisted by the Repository. That in turn will trigger the handling of\ndomain events in the ",(0,o.kt)("inlineCode",{parentName:"p"},"AbstractAggregateRoot.java"),". If we sent domain events from the domain layer already, we\ncould encounter a chicken and egg problem, since the domain event would be sent before the JPA entity is persisted and a\npossible roll back would leave us in an inconsistent state."),(0,o.kt)("p",null,"Let's get started! Here are some useful snippets. Can you implement them in the correct places?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n@Getter\nprivate final List<DomainEvent> domainEvents = new ArrayList<>();\n")),(0,o.kt)("p",null,"Our abstract base Domain event"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"    public abstract class DomainEvent {\n}\n")),(0,o.kt)("p",null,"and the actual publishing event we want to trigger when publishing was requested."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n@Value\npublic static class RequestPublishingEvent extends DomainEvent {\n    Long bookId;\n    UUID publisherId;\n}\n")),(0,o.kt)("p",null,"The following snippet provides us the support for handling the Domain events correctly in our JPA entity."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class BookJPA extends AbstractAggregateRoot<BookJPA> {\n    // ...\n    public void registerDomainEvents(List<DomainEvent> domainEvents) {\n        domainEvents.forEach(this::andEvent);\n    }\n}\n")),(0,o.kt)("p",null,"In order to test the complete flow you will need to trigger the publishing of a book and then check whether the\ndomain event was published correctly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'### Register an author first\nPOST /authors/commands/register HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "firstName": "PLACE_YOUR_FIRST_NAME",\n  "lastName": "PLACE_YOUR_LAST_NAME"\n}\n\n\n### Then write a book\n### TODO change the author id to something that exists in your DB\nPOST /authors/10001/commands/writeBook HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "title": "PLACE_YOUR_TILE",\n  "genre": "HORROR"\n}\n\n\n### ThenPublish a book\n### TODO change the book id to something that exists in your DB and the publisherID to one that exists on your local\n### instance of the publishing service\nPOST /books/10008/commands/publish HTTP/1.1\nHost: localhost:8080\nContent-Type: application/json\n\n{\n  "publisherId": "80553ae1-2ef8-4adf-8fa8-d551684a9ea3"\n}\n')),(0,o.kt)("h3",{id:"tdd"},"TDD"),(0,o.kt)("p",null,"You can tackle this task following a prepared test-driven development approach! You can find the code prepared\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events/tree/task_5/add_domain_event_support_TDD"},"in this branch"),"."),(0,o.kt)("h3",{id:"solution"},"Solution"),(0,o.kt)("p",null,"Got stuck anywhere along the way? Not to worry, you can find the fully implemented solution\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events/tree/task_5/add_domain_event_support_DONE"},"in this branch"),"."))}u.isMDXComponent=!0}}]);