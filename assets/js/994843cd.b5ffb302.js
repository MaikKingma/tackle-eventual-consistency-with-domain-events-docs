"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[979],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>v});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),h=r,v=u["".concat(l,".").concat(h)]||u[h]||d[h]||a;return n?i.createElement(v,o(o({ref:t},p),{},{components:n})):i.createElement(v,o({ref:t},p))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},7366:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={sidebar_position:8},o="8: Hands-On - Add the event listener",s={unversionedId:"add-event-listener",id:"add-event-listener",title:"8: Hands-On - Add the event listener",description:"We added the logic for publishing our domain event. Now we need to add a first consumer.",source:"@site/docs/8.add-event-listener.md",sourceDirName:".",slug:"/add-event-listener",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/add-event-listener",draft:!1,editUrl:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events-docs/docs/8.add-event-listener.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"7: Theory - Event Handlers in Spring",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/theory-event-listener"}},l={},c=[{value:"The event listener in the process adapter",id:"the-event-listener-in-the-process-adapter",level:2},{value:"Task 1: Consume the RequestPublishingEvent",id:"task-1-consume-the-requestpublishingevent",level:3},{value:"The delegate implementation",id:"the-delegate-implementation",level:2},{value:"Validate",id:"validate",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"8-hands-on---add-the-event-listener"},"8: Hands-On - Add the event listener"),(0,r.kt)("p",null,"We added the logic for publishing our domain event. Now we need to add a first consumer.\nBy default, Spring publishes its Domain Events framework internal via the ",(0,r.kt)("inlineCode",{parentName:"p"},"SimpleApplicationEventMulticaster"),". For now,\nwe will work with this default behaviour. In the next section we will update that logic to publish our domain events to\na Kafka queue as well."),(0,r.kt)("h2",{id:"the-event-listener-in-the-process-adapter"},"The event listener in the process adapter"),(0,r.kt)("p",null,"Here is an example of an ",(0,r.kt)("inlineCode",{parentName:"p"},"EventProcessor")," that listens to an ",(0,r.kt)("inlineCode",{parentName:"p"},"ExampleEvent"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Slf4j\n@Component\npublic class EventProcessor {\n\n    // ...\n\n    @TransactionalEventListener(phase = AFTER_COMMIT)\n    public void handleEvent(ExampleEvent event) {\n        // do something\n    }\n}\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Hint:")," TransactionalEventListener is a Spring feature that allows you to listen to events that are published within a\ntransaction. This is useful for publishing events that are triggered by a command. The event is only published if\nthe transaction is committed successfully. If the transaction is rolled back, the event is not published.")),(0,r.kt)("h3",{id:"task-1-consume-the-requestpublishingevent"},"Task 1: Consume the RequestPublishingEvent"),(0,r.kt)("p",null,"We defined a domain event in the previous hands-on section, namely the ",(0,r.kt)("inlineCode",{parentName:"p"},"Book.RequestPublishingEvent.class"),".\nNow create your own ",(0,r.kt)("inlineCode",{parentName:"p"},"EventProcessor")," in the ",(0,r.kt)("inlineCode",{parentName:"p"},"process")," package and make it listen to our ",(0,r.kt)("inlineCode",{parentName:"p"},"RequestPublishingEvent"),"."),(0,r.kt)("p",null,"For now, maybe add a log statement s.t. you can verify the event is consumed correctly."),(0,r.kt)("h2",{id:"the-delegate-implementation"},"The delegate implementation"),(0,r.kt)("p",null,"We will continue by implementing the service class ",(0,r.kt)("inlineCode",{parentName:"p"},"/process/book/PublishBookDelegate.java"),", that contains the business\nlogic that needs to be executed when a ",(0,r.kt)("inlineCode",{parentName:"p"},"Book.RequestPublishingEvent.class")," is fired."),(0,r.kt)("p",null,"Useful snippet:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"@Service\npublic class PublishBookDelegate {\n\n  private final BookService bookService;\n  private final PublisherService publisherService;\n\n\n  public PublishBookDelegate(BookService bookService, PublisherService publisherService) {\n    this.bookService = bookService;\n    this.publisherService = publisherService;\n  }\n\n  @Transactional(propagation = REQUIRES_NEW)\n  public void publishBook(Book.RequestPublishingEvent event) {\n    // retrieve book by id from event\n    \n   // request the publishing of the book via the Publisher ACL layer (also see API docs below)\n\n    // update the isbn of the book you received as a response and then store the book\n  }\n}\n")),(0,r.kt)("p",null,"The API on the publisher service is defined as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-http",metastring:"request",request:!0},'POST /publishers/receiveBookOffer\nHost: localhost:8081\nContent-Type: application/json\n\n{\n  "publisherId": "<SOME-UUID>",\n  "author": "author name",\n  "title": "Cool Title"\n}\n\nReturns:\n{\n  "isbn": "ISBN-3895b77d-ee27-40de-9b08-bf24fe2a013a"\n}\n')),(0,r.kt)("h3",{id:"validate"},"Validate"),(0,r.kt)("p",null,"Let's test your implementation:"))}d.isMDXComponent=!0}}]);