"use strict";(self.webpackChunkclean_hexagonal_onion_docs=self.webpackChunkclean_hexagonal_onion_docs||[]).push([[137],{3905:(e,n,t)=>{t.d(n,{Zo:()=>l,kt:()=>h});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,h=m["".concat(c,".").concat(u)]||m[u]||d[u]||o;return t?r.createElement(h,a(a({ref:n},l),{},{components:t})):r.createElement(h,a({ref:n},l))}));function h(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,a=new Array(o);a[0]=u;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:i,a[1]=s;for(var p=2;p<o;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8099:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var r=t(7462),i=(t(7294),t(3905));const o={sidebar_position:3},a="2: Theory - Domain Events in Spring",s={unversionedId:"domain-events",id:"domain-events",title:"2: Theory - Domain Events in Spring",description:"Spring Domain Events are a design pattern used in the context of Domain-Driven Design (DDD) within the Spring Framework.",source:"@site/docs/3.domain-events.md",sourceDirName:".",slug:"/domain-events",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/domain-events",draft:!1,editUrl:"https://github.com/MaikKingma/tackle-eventual-consistency-with-domain-events-docs/docs/3.domain-events.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"3: Theory - Solutions",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/Solutions"},next:{title:"4: Hands-On - The domain",permalink:"/tackle-eventual-consistency-with-domain-events-docs/docs/getting-to-know-the-domain"}},c={},p=[],l={toc:p},m="wrapper";function d(e){let{components:n,...t}=e;return(0,i.kt)(m,(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"2-theory---domain-events-in-spring"},"2: Theory - Domain Events in Spring"),(0,i.kt)("p",null,"Spring Domain Events are a design pattern used in the context of Domain-Driven Design (DDD) within the Spring Framework.\nDomain events are a way to model significant occurrences within a business domain that can trigger other actions or side\neffects. These events are generated by aggregates (entities or value objects) in the domain model and are consumed by\nevent handlers or other parts of the system."),(0,i.kt)("p",null,"Spring Domain Events can be helpful in achieving loose coupling and separation of concerns in complex software systems.\nHere's a brief overview of the key components and how they work together:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Domain Events:")," These are simple data classes representing a significant occurrence within the business domain. They\ntypically contain relevant data needed to process the event and should be immutable.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Event Publisher:")," This is a component responsible for publishing domain events. In Spring, the ApplicationContext can be\nused as an event publisher, and the publishEvent() method can be used to publish domain events to registered listeners.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Event Listener:")," Event listeners are components that subscribe to specific domain events and perform actions in response\nto those events. In Spring, event listeners can be implemented as methods annotated with @EventListener or as classes\nimplementing the ApplicationListener interface.")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("strong",{parentName:"p"},"Event Dispatcher:")," This component is responsible for dispatching events to the appropriate event listeners. In the Spring\nFramework, this is handled by the ApplicationEventMulticaster, which is automatically configured when using the\nApplicationContext."))))}d.isMDXComponent=!0}}]);